<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/task  
		http://www.springframework.org/schema/task/spring-task.xsd">
		
	<!-- Add support for component scanning -->
	<context:component-scan base-package="com.ioannisgk.evsharing" />

	<!-- Add support for conversion, formatting and validation support -->
	<mvc:annotation-driven/>

	<!-- Define Spring MVC view resolver -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

    <!-- Step 1: Define Database DataSource / connection pool -->
	<bean id="myDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="com.mysql.jdbc.Driver" />
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/evsharing_schema?useSSL=false" />
        <property name="user" value="evsharingUser" />
        <property name="password" value="evsharingPass" /> 

        <!-- these are connection pool properties for C3P0 -->
		<property name="initialPoolSize" value="5"/>
        <property name="minPoolSize" value="5" />
        <property name="maxPoolSize" value="20" />
        <property name="maxIdleTime" value="30000" />
	</bean>  
	
    <!-- Step 2: Setup Hibernate session factory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		<property name="packagesToScan" value="com.ioannisgk.evsharing.entities" />
		<property name="hibernateProperties">
		   <props>
		      <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
		      <prop key="hibernate.show_sql">true</prop>
		   </props>
		</property>
   </bean>	  

    <!-- Step 3: Setup Hibernate transaction manager -->
	<bean id="myTransactionManager"
            class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- Step 4: Enable configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="myTransactionManager" />

	<!-- Add support for reading web resources: css, images, js, etc ... -->
	<mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>
	
	<!-- Add support for asynchronous execution -->
	<task:annotation-driven></task:annotation-driven>
	<mvc:annotation-driven> 
    	<mvc:async-support default-timeout="30000" task-executor="taskExecutor"/>
  	</mvc:annotation-driven>
	
	<!-- Add support for multithreading with taskExecutor -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="5"/>
    	<property name="maxPoolSize" value="50"/>
    	<property name="queueCapacity" value="10"/>
    	<property name="keepAliveSeconds" value="120"/>
	</bean>
	
	<!-- Load custom message resources -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" value="resources/messages"/>
	</bean>
	
	<!-- Load multipart resolver for uploading files -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="5242880"/>
	</bean>
	
	<!-- Spring Batch configuration -->
	
	<bean id="jobRepository"   
        class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean"> 
        <property name="transactionManager" ref="transactionManager" /> 
    </bean>     
     
    <bean id="transactionManager" 
        class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />  
      
    <bean id="jobLauncher" 
        class="org.springframework.batch.core.launch.support.SimpleJobLauncher"> 
      <property name="jobRepository" ref="jobRepository" /> 
    </bean> 
   
    <bean id="jobRegistry"
	    class="org.springframework.batch.core.configuration.support.MapJobRegistry"/>
     
    <bean class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
        <property name="jobRegistry" ref="jobRegistry"/>
    </bean>
    
    <!-- Run job every 10 seconds without auto startup -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	  	<property name="autoStartup">
			<value>false</value>
		</property>
		<property name="triggers">
			<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
				<property name="jobDetail" ref="jobDetailShowDataProgress" />
				<property name="cronExpression" value="*/10 * * * * ?" />
		  	</bean>
		</property>
	</bean>
	  
	<!-- Job detail bean from Quartz factory -->
	<bean id="jobDetailShowDataProgress" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
	  	<property name="jobClass" value="com.ioannisgk.evsharing.utils.QuartzTaskScheduler"></property>
	  	<property name="jobDataAsMap">
	  		<map>
	  			<entry key="jobName" value="showDataProgress"></entry>
	  			<entry key="jobLauncher" value-ref="jobLauncher"></entry>
	  			<entry key="jobLocator" value-ref="jobRegistry"></entry>
	  		</map>
	  	</property>
	</bean>
   
    <!-- Defining the tasklet bean -->
	<bean id="tasklet" class="com.ioannisgk.evsharing.utils.MyTasklet" />
	
    <!-- Defining the job --> 
    <batch:job id="showDataProgress">  
    	<batch:step id="step1"> 
        	<tasklet ref="tasklet"/>   
    	</batch:step>    
    </batch:job>
   
</beans>